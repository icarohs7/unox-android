/*
 * MIT License
 *
 * Copyright (c) 2018 Icaro R D Temponi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

buildscript {
    apply(from: "buildSrc/libs.gradle")

    repositories {
        google()
        jcenter()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "com.android.tools.build:gradle:3.2.1"
        classpath "com.github.dcendents:android-maven-gradle-plugin:2.1"
        classpath "gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.11.0"
    }
}

apply(plugin: "com.palantir.git-version")
group = "com.github.icarohs7"
version = gitVersion().toString().find("(\\d\\.\\d\\.\\d)")

subprojects { proj ->
    apply(plugin: "com.github.dcendents.android-maven")
    apply(plugin: "com.android.library")
    apply(plugin: "kotlin-android")
    apply(plugin: "kotlin-android-extensions")
    apply(plugin: "kotlin-kapt")

    if (proj.name != "core") dependencies { implementation(project(":core")) }

    android {
        compileSdkVersion 28

        defaultConfig {
            minSdkVersion(21)
            targetSdkVersion(28)
            versionCode(1)
            versionName(rootProject.version)
        }

        testOptions {
            unitTests.includeAndroidResources true
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }
        }
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"

        testImplementation "se.lovef:kotlin-assert-utils:${versions.kotlinassertutils}"
        testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    }

    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}
